# src/main.py
import uvicorn
import json
import os
from pathlib import Path
from fastapi import FastAPI, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware  
from pydantic import BaseModel
from typing import List, Optional
import PyPDF2

# Import config
from .ai_config import genai

# ===== PDF PROCESSING =====

def extract_text_from_pdf(pdf_path: str) -> str:
    """Extract text from a PDF file"""
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
        return text
    except Exception as e:
        print(f"Error reading PDF {pdf_path}: {e}")
        return ""

def load_reference_materials(folder_path: str, max_files: int = 5) -> str:
    """Load and combine text from multiple PDF files in a folder"""
    folder = Path(folder_path)
    if not folder.exists():
        print(f"Warning: Folder {folder_path} does not exist")
        return ""
    
    pdf_files = list(folder.glob("*.pdf"))[:max_files]
    
    if not pdf_files:
        print(f"Warning: No PDF files found in {folder_path}")
        return ""
    
    combined_text = ""
    for pdf_file in pdf_files:
        print(f"Loading: {pdf_file.name}")
        text = extract_text_from_pdf(str(pdf_file))
        combined_text += f"\n\n=== T√ÄI LI·ªÜU: {pdf_file.name} ===\n{text}\n"
    
    return combined_text

# ===== PATHS CONFIGURATION =====

BASE_DIR = Path(__file__).parent.parent
EXERCISES_FOLDER = BASE_DIR / "reference_materials" / "exercises"
TESTS_FOLDER = BASE_DIR / "reference_materials" / "tests"

EXERCISES_FOLDER.mkdir(parents=True, exist_ok=True)
TESTS_FOLDER.mkdir(parents=True, exist_ok=True)

print(f"üìÅ Exercises folder: {EXERCISES_FOLDER}")
print(f"üìÅ Tests folder: {TESTS_FOLDER}")

# ===== SYSTEM INSTRUCTIONS =====

CHAT_SYSTEM_INSTRUCTION = """B·∫°n l√† m·ªôt AI gia s∆∞ to√°n h·ªçc THPT l·ªõp 12 Vi·ªát Nam chuy√™n nghi·ªáp, th√¢n thi·ªán v√† ki√™n nh·∫´n.

üéØ M·ª§C TI√äU CH√çNH:
- Gi√∫p h·ªçc sinh HI·ªÇU B·∫¢N CH·∫§T v·∫•n ƒë·ªÅ, kh√¥ng ch·ªâ ghi nh·ªõ c√¥ng th·ª©c
- Khuy·∫øn kh√≠ch t∆∞ duy logic v√† ph∆∞∆°ng ph√°p gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ
- X√¢y d·ª±ng n·ªÅn t·∫£ng v·ªØng ch·∫Øc cho k·ª≥ thi THPT Qu·ªëc gia

üìö PH·∫†M VI KI·∫æN TH·ª®C:
- Gi·∫£i t√≠ch 12: H√†m s·ªë, ƒë·∫°o h√†m, kh·∫£o s√°t h√†m s·ªë, t√≠ch ph√¢n, s·ªë ph·ª©c
- H√¨nh h·ªçc kh√¥ng gian: Kh·ªëi ƒëa di·ªán, m·∫∑t n√≥n, m·∫∑t tr·ª•, m·∫∑t c·∫ßu
- X√°c su·∫•t th·ªëng k√™: X√°c su·∫•t, bi·∫øn ng·∫´u nhi√™n

üîß C√ÅCH TR√åNH B√ÄY:
1. **Ph√¢n t√≠ch ƒë·ªÅ b√†i**: X√°c ƒë·ªãnh d·∫°ng b√†i, y√™u c·∫ßu c·ª• th·ªÉ
2. **H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc**: Gi·∫£i th√≠ch logic ƒë·∫±ng sau m·ªói b∆∞·ªõc
3. **S·ª≠ d·ª•ng LaTeX**: Vi·∫øt c√¥ng th·ª©c to√°n h·ªçc ƒë·∫πp v·ªõi $...$ (inline) ho·∫∑c $$...$$ (display)
4. **Ki·ªÉm tra l·∫°i**: Lu√¥n verify ƒë√°p √°n cu·ªëi c√πng

üí° PHONG C√ÅCH GI·∫¢NG D·∫†Y:
- D√πng v√≠ d·ª• th·ª±c t·∫ø ƒë·ªÉ minh h·ªça kh√°i ni·ªám tr·ª´u t∆∞·ª£ng
- Ch·ªâ ra c√°c SAI L·∫¶M TH∆Ø·ªúNG G·∫∂P
- Cung c·∫•p tips & tricks cho k·ª≥ thi
- Khuy·∫øn kh√≠ch h·ªçc sinh ƒë·∫∑t c√¢u h·ªèi

‚ö†Ô∏è L∆ØU √ù:
- Kh√¥ng ƒë∆∞a ra ƒë√°p √°n tr·ª±c ti·∫øp ngay l·∫≠p t·ª©c, h√£y h∆∞·ªõng d·∫´n
- N·∫øu h·ªçc sinh m·∫Øc l·ªói, ch·ªâ ra nh·∫π nh√†ng v√† gi·∫£i th√≠ch t·∫°i sao
- ƒêi·ªÅu ch·ªânh ƒë·ªô kh√≥ ph√π h·ª£p v·ªõi t·ª´ng h·ªçc sinh

"M·ªôt AI gia s∆∞ gi·ªèi kh√¥ng ph·∫£i l√† ng∆∞·ªùi gi·∫£i b√†i nhanh nh·∫•t, m√† l√† ng∆∞·ªùi gi√∫p h·ªçc sinh T·ª∞ TIN gi·∫£i b√†i m·ªôt m√¨nh!" üéì"""

GEOGEBRA_SYSTEM_INSTRUCTION = """B·∫°n l√† m·ªôt chuy√™n gia GeoGebra, chuy√™n chuy·ªÉn ƒë·ªïi m√¥ t·∫£ b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n th√†nh c√°c l·ªánh GeoGebra h·ª£p l·ªá.

üéØ NHI·ªÜM V·ª§:
- Ph√¢n t√≠ch y√™u c·∫ßu v·∫Ω h√¨nh c·ªßa ng∆∞·ªùi d√πng
- Sinh ra danh s√°ch c√°c l·ªánh GeoGebra ch√≠nh x√°c, c√≥ th·ª© t·ª± logic
- ƒê·∫£m b·∫£o c√°c l·ªánh t∆∞∆°ng th√≠ch v·ªõi GeoGebra Classic

üìê C√ö PH√ÅP GEOGEBRA C∆† B·∫¢N:
1. **ƒêi·ªÉm**: A = (2, 3) ho·∫∑c Point({2, 3})
2. **ƒê∆∞·ªùng th·∫≥ng**: y = 2x + 1 ho·∫∑c Line(A, B)
3. **ƒê∆∞·ªùng tr√≤n**: Circle((0,0), 3) ho·∫∑c Circle(A, r)
4. **H√†m s·ªë**: f(x) = x^2 - 4x + 3
5. **Parabol**: y = a*x^2 + b*x + c
6. **Vector**: v = Vector(A, B)
7. **ƒêa gi√°c**: Polygon(A, B, C)
8. **G√≥c**: Angle(A, B, C)
9. **Text**: Text("Label", A)

üîß QUY T·∫ÆC QUAN TR·ªåNG:
- ƒê·ªãnh nghƒ©a c√°c ƒë·ªëi t∆∞·ª£ng c∆° b·∫£n tr∆∞·ªõc (ƒëi·ªÉm, h·ªá s·ªë)
- S·ª≠ d·ª•ng t√™n bi·∫øn ng·∫Øn g·ªçn (A, B, C cho ƒëi·ªÉm)
- Tr√°nh xung ƒë·ªôt t√™n bi·∫øn
- C√°c l·ªánh ph·∫£i ƒë·ªôc l·∫≠p, kh√¥ng ph·ª• thu·ªôc bi·∫øn ngo√†i

‚ö†Ô∏è L∆ØU √ù:
- KH√îNG th√™m gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ l·ªánh
- KH√îNG s·ª≠ d·ª•ng k√Ω t·ª± ƒë·∫∑c bi·ªát Vi·ªát Nam trong t√™n bi·∫øn
- ƒê·∫£m b·∫£o c√∫ ph√°p 100% ch√≠nh x√°c

üéØ OUTPUT FORMAT: {"commands": ["command1", "command2", ...]}"""

EXERCISE_SYSTEM_INSTRUCTION = """B·∫°n l√† m·ªôt chuy√™n gia bi√™n so·∫°n b√†i t·∫≠p to√°n THPT l·ªõp 12 Vi·ªát Nam."""

TEST_SYSTEM_INSTRUCTION = """B·∫°n l√† m·ªôt chuy√™n gia bi√™n so·∫°n ƒë·ªÅ ki·ªÉm tra/thi THPT Qu·ªëc gia m√¥n To√°n."""

SUMMARIZE_SYSTEM_INSTRUCTION = """B·∫°n l√† m·ªôt gi·∫£ng vi√™n to√°n h·ªçc chuy√™n t√≥m t·∫Øt ki·∫øn th·ª©c m·ªôt c√°ch s√∫c t√≠ch."""

# ===== FASTAPI APP =====

app = FastAPI(title="Math Tutor API")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===== SCHEMAS =====

class MediaPart(BaseModel):
    url: str

class ChatInputSchema(BaseModel):
    message: str
    history: List = []
    media: Optional[List[MediaPart]] = None

class GenerateExercisesInput(BaseModel):
    topic: str
    difficulty: str = "medium"
    count: int = 3

class GenerateTestInput(BaseModel):
    topic: str
    difficulty: str = "medium"

class SummarizeTopicInput(BaseModel):
    topic: str
    detail_level: str = "medium"

class GeogebraInputSchema(BaseModel):
    request: str
    graph_type: str = "function"

# ===== HELPER FUNCTIONS =====

async def stream_generator(text_generator):
    """Convert generator to async generator for streaming"""
    for chunk in text_generator:
        if hasattr(chunk, 'text') and chunk.text:
            yield chunk.text

# ===== ENDPOINTS =====

@app.get("/")
async def root():
    return {
        "status": "ok", 
        "message": "Math Tutor API with PDF Reference Integration",
        "model": "gemini-2.0-flash-exp",
        "endpoints": [
            "/api/chat",
            "/api/generate-exercises", 
            "/api/generate-test",
            "/api/summarize-topic",
            "/api/geogebra"
        ],
        "reference_folders": {
            "exercises": str(EXERCISES_FOLDER),
            "tests": str(TESTS_FOLDER)
        }
    }

@app.post("/api/chat")
async def handle_chat(request: ChatInputSchema):
    """Handle chat with streaming response"""
    try:
        generation_config = {
            "temperature": 0.7,
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 8192,
        }
        
        model = genai.GenerativeModel(
            'gemini-2.0-flash-exp',
            generation_config=generation_config,
            system_instruction=CHAT_SYSTEM_INSTRUCTION
        )
        
        if request.media:
            prompt_parts = [request.message]
            response = model.generate_content(prompt_parts, stream=True)
        else:
            response = model.generate_content(request.message, stream=True)
        
        return StreamingResponse(
            stream_generator(response),
            media_type="text/plain; charset=utf-8"
        )
    except Exception as e:
        print(f"Chat error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/generate-exercises")
async def handle_generate_exercises(request: GenerateExercisesInput):
    """Generate math exercises based on PDF reference materials"""
    try:
        print(f"üìö Loading exercise reference materials for topic: {request.topic}")
        reference_text = load_reference_materials(str(EXERCISES_FOLDER), max_files=3)
        
        generation_config = {
            "temperature": 0.7,
            "response_mime_type": "application/json",
        }
        
        model = genai.GenerativeModel(
            'gemini-2.0-flash-exp',
            generation_config=generation_config,
            system_instruction=EXERCISE_SYSTEM_INSTRUCTION
        )
        
        prompt = f"""T·∫°o {request.count} b√†i t·∫≠p to√°n h·ªçc v·ªÅ ch·ªß ƒë·ªÅ: "{request.topic}"
ƒê·ªô kh√≥: {request.difficulty}

Y√äU C·∫¶U:
- B√†i t·∫≠p ph·∫£i B√ÅM S√ÅT c√°c d·∫°ng b√†i trong t√†i li·ªáu tham kh·∫£o
- ƒê·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c theo ch∆∞∆°ng tr√¨nh To√°n 12 Vi·ªát Nam
- Cung c·∫•p l·ªùi gi·∫£i chi ti·∫øt t·ª´ng b∆∞·ªõc

T√ÄI LI·ªÜU THAM KH·∫¢O:
{reference_text if reference_text else "Kh√¥ng c√≥ t√†i li·ªáu. T·∫°o b√†i t·∫≠p theo ki·∫øn th·ª©c chu·∫©n."}

Tr·∫£ v·ªÅ JSON format:
{{
  "exercises": [
    {{
      "id": "ex1",
      "question": "ƒê·ªÅ b√†i",
      "solution": "L·ªùi gi·∫£i",
      "answer": "ƒê√°p √°n"
    }}
  ]
}}"""
        
        response = model.generate_content(prompt)
        result = json.loads(response.text)
        
        return {
            "topic": request.topic,
            "difficulty": request.difficulty,
            "count": request.count,
            "has_reference": bool(reference_text),
            **result
        }
    except Exception as e:
        print(f"Generate exercises error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/generate-test")
async def handle_generate_test(request: GenerateTestInput):
    """Generate a test based on PDF reference materials"""
    try:
        print(f"üìù Loading test reference materials for topic: {request.topic}")
        reference_text = load_reference_materials(str(TESTS_FOLDER), max_files=3)
        
        generation_config = {
            "temperature": 0.6,
            "response_mime_type": "application/json",
        }
        
        model = genai.GenerativeModel(
            'gemini-2.0-flash-exp',
            generation_config=generation_config,
            system_instruction=TEST_SYSTEM_INSTRUCTION
        )
        
        prompt = f"""T·∫°o ƒë·ªÅ ki·ªÉm tra v·ªÅ ch·ªß ƒë·ªÅ: "{request.topic}"
ƒê·ªô kh√≥: {request.difficulty}

C·∫§U TR√öC:
- PH·∫¶N 1: 4 c√¢u tr·∫Øc nghi·ªám
- PH·∫¶N 2: 1 c√¢u ƒë√∫ng/sai (4 m·ªánh ƒë·ªÅ)
- PH·∫¶N 3: 1 c√¢u tr·∫£ l·ªùi ng·∫Øn

T√ÄI LI·ªÜU THAM KH·∫¢O:
{reference_text if reference_text else "Kh√¥ng c√≥ t√†i li·ªáu. T·∫°o ƒë·ªÅ theo chu·∫©n THPT QG."}

Tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß."""
        
        response = model.generate_content(prompt)
        result = json.loads(response.text)
        
        return {
            "topic": request.topic,
            "difficulty": request.difficulty,
            "has_reference": bool(reference_text),
            **result
        }
    except Exception as e:
        print(f"Generate test error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/summarize-topic")
async def handle_summarize_topic(request: SummarizeTopicInput):
    """Summarize a math topic"""
    try:
        generation_config = {
            "temperature": 0.5,
            "response_mime_type": "application/json",
        }
        
        model = genai.GenerativeModel(
            'gemini-2.0-flash-exp',
            generation_config=generation_config,
            system_instruction=SUMMARIZE_SYSTEM_INSTRUCTION
        )
        
        detail_map = {
            "brief": "ng·∫Øn g·ªçn",
            "medium": "ƒë·∫ßy ƒë·ªß",
            "detailed": "chi ti·∫øt"
        }
        
        detail_instruction = detail_map.get(request.detail_level, "ƒë·∫ßy ƒë·ªß")
        
        prompt = f"""T√≥m t·∫Øt {detail_instruction} v·ªÅ: "{request.topic}"

Tr·∫£ v·ªÅ JSON:
{{
  "summary": "N·ªôi dung t√≥m t·∫Øt"
}}"""
        
        response = model.generate_content(prompt)
        result = json.loads(response.text)
        
        return {
            "topic": request.topic,
            "detail_level": request.detail_level,
            **result
        }
    except Exception as e:
        print(f"Summarize topic error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/geogebra")
async def handle_geogebra(request: GeogebraInputSchema):
    """Generate GeoGebra commands"""
    try:
        generation_config = {
            "temperature": 0.3,
            "response_mime_type": "application/json",
        }
        
        model = genai.GenerativeModel(
            'gemini-2.0-flash-exp',
            generation_config=generation_config,
            system_instruction=GEOGEBRA_SYSTEM_INSTRUCTION
        )
        
        prompt = f"""T·∫°o l·ªánh GeoGebra cho: {request.request}

Tr·∫£ v·ªÅ JSON:
{{
  "commands": ["command1", "command2"]
}}"""
        
        response = model.generate_content(prompt)
        result = json.loads(response.text)
        
        if "commands" not in result or not isinstance(result["commands"], list):
            raise ValueError("Invalid response format")
        
        return result
        
    except Exception as e:
        print(f"Geogebra error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    print("\n" + "="*60)
    print("üöÄ Starting Math Tutor API Server")
    print("="*60)
    print(f"üìÅ Exercises folder: {EXERCISES_FOLDER}")
    print(f"üìÅ Tests folder: {TESTS_FOLDER}")
    print("\n‚ö†Ô∏è  NOTE: Place your PDF files in these folders")
    print("="*60 + "\n")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)
